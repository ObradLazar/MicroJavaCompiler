INFO  20:43:09,867 - ==========================================================================================
INFO  20:43:09,868 - Compiling source file C:\Users\LENOVO\Desktop\Njihov projekat\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\.\test\set.mj
INFO  20:43:09,868 - ==========================================================================================
INFO  20:43:09,872 - Parsing source file
INFO  20:43:09,872 - ==========================================================================================
INFO  20:43:09,892 - #2 program
INFO  20:43:09,892 - #29 test301
INFO  20:43:09,892 - #7 const
INFO  20:43:09,893 - #29 int
INFO  20:43:09,893 - #29 nula
INFO  20:43:09,894 - #12 =
INFO  20:43:09,894 - #26 0
INFO  20:43:09,894 - #9 ;
INFO  20:43:09,895 - #7 const
INFO  20:43:09,896 - #29 int
INFO  20:43:09,896 - #29 jedan
INFO  20:43:09,896 - #12 =
INFO  20:43:09,896 - #26 1
INFO  20:43:09,896 - #9 ;
INFO  20:43:09,896 - #7 const
INFO  20:43:09,896 - #29 int
INFO  20:43:09,896 - #29 pet
INFO  20:43:09,896 - #12 =
INFO  20:43:09,896 - #26 5
INFO  20:43:09,896 - #9 ;
INFO  20:43:09,896 - #29 int
INFO  20:43:09,896 - #29 niz
INFO  20:43:09,897 - #22 [
INFO  20:43:09,897 - #23 ]
INFO  20:43:09,897 - #9 ;
INFO  20:43:09,897 - #29 char
INFO  20:43:09,897 - #29 nizch
INFO  20:43:09,898 - #22 [
INFO  20:43:09,898 - #23 ]
INFO  20:43:09,898 - #9 ;
INFO  20:43:09,898 - #29 int
INFO  20:43:09,898 - #29 a
INFO  20:43:09,898 - #9 ;
INFO  20:43:09,898 - #29 set
INFO  20:43:09,898 - #29 s1
INFO  20:43:09,898 - #10 ,
INFO  20:43:09,898 - #29 s2
INFO  20:43:09,898 - #10 ,
INFO  20:43:09,898 - #29 s3
INFO  20:43:09,898 - #9 ;
INFO  20:43:09,898 - #20 {
INFO  20:43:09,898 - #3 void
INFO  20:43:09,899 - #29 main
INFO  20:43:09,899 - #24 (
INFO  20:43:09,900 - #25 )
INFO  20:43:09,900 - #29 int
INFO  20:43:09,901 - #29 bodovi
INFO  20:43:09,901 - #9 ;
INFO  20:43:09,901 - #29 int
INFO  20:43:09,901 - #29 temp
INFO  20:43:09,901 - #9 ;
INFO  20:43:09,901 - #20 {
INFO  20:43:09,901 - #29 niz
INFO  20:43:09,902 - #12 =
INFO  20:43:09,902 - #6 new
INFO  20:43:09,902 - #29 int
INFO  20:43:09,902 - #22 [
INFO  20:43:09,902 - #26 3
INFO  20:43:09,902 - #23 ]
INFO  20:43:09,902 - #9 ;
INFO  20:43:09,902 - #29 niz
INFO  20:43:09,903 - #22 [
INFO  20:43:09,903 - #26 0
INFO  20:43:09,903 - #23 ]
INFO  20:43:09,903 - #12 =
INFO  20:43:09,903 - #26 1
INFO  20:43:09,903 - #9 ;
INFO  20:43:09,903 - #29 niz
INFO  20:43:09,904 - #22 [
INFO  20:43:09,904 - #26 1
INFO  20:43:09,904 - #23 ]
INFO  20:43:09,904 - #12 =
INFO  20:43:09,904 - #26 2
INFO  20:43:09,904 - #9 ;
INFO  20:43:09,904 - #29 niz
INFO  20:43:09,904 - #22 [
INFO  20:43:09,904 - #26 2
INFO  20:43:09,904 - #23 ]
INFO  20:43:09,904 - #12 =
INFO  20:43:09,904 - #26 3
INFO  20:43:09,904 - #9 ;
INFO  20:43:09,904 - #29 s1
INFO  20:43:09,904 - #12 =
INFO  20:43:09,904 - #6 new
INFO  20:43:09,904 - #29 set
INFO  20:43:09,904 - #22 [
INFO  20:43:09,904 - #26 5
INFO  20:43:09,904 - #23 ]
INFO  20:43:09,904 - #9 ;
INFO  20:43:09,905 - #29 add
INFO  20:43:09,905 - #24 (
INFO  20:43:09,905 - #29 s1
INFO  20:43:09,905 - #10 ,
INFO  20:43:09,905 - #26 1
INFO  20:43:09,905 - #25 )
INFO  20:43:09,905 - #9 ;
INFO  20:43:09,905 - #29 add
INFO  20:43:09,905 - #24 (
INFO  20:43:09,905 - #29 s1
INFO  20:43:09,905 - #10 ,
INFO  20:43:09,905 - #26 1
INFO  20:43:09,906 - #25 )
INFO  20:43:09,906 - #9 ;
INFO  20:43:09,906 - #29 add
INFO  20:43:09,906 - #24 (
INFO  20:43:09,906 - #29 s1
INFO  20:43:09,906 - #10 ,
INFO  20:43:09,906 - #26 2
INFO  20:43:09,906 - #25 )
INFO  20:43:09,906 - #9 ;
INFO  20:43:09,906 - #4 print
INFO  20:43:09,906 - #24 (
INFO  20:43:09,906 - #29 s1
INFO  20:43:09,906 - #25 )
INFO  20:43:09,906 - #9 ;
INFO  20:43:09,906 - #4 print
INFO  20:43:09,906 - #24 (
INFO  20:43:09,906 - #29 eol
INFO  20:43:09,906 - #25 )
INFO  20:43:09,906 - #9 ;
INFO  20:43:09,907 - #21 }
INFO  20:43:09,907 - #21 }
INFO  20:43:09,907 - ==========================================================================================
INFO  20:43:09,908 - Parsing successful
INFO  20:43:09,908 - ==========================================================================================
INFO  20:43:09,909 - Abstract syntax tree
 Program(
   ProgramName(
    test301
   ) [ProgramName]
   DeclarationList(
     DeclarationList(
       DeclarationList(
         DeclarationList(
           DeclarationList(
             DeclarationList(
               DeclarationList(
                 NoDeclarationList(
                 ) [NoDeclarationList]
                 DeclarationConstant(
                   ConstDecl(
                     Type(
                      int
                     ) [Type]
                     ConstDeclListSignle(
                       ConstDeclaration(
                        nula
                         ConstTypeNumber(
                          0
                         ) [ConstTypeNumber]
                       ) [ConstDeclaration]
                     ) [ConstDeclListSignle]
                   ) [ConstDecl]
                 ) [DeclarationConstant]
               ) [DeclarationList]
               DeclarationConstant(
                 ConstDecl(
                   Type(
                    int
                   ) [Type]
                   ConstDeclListSignle(
                     ConstDeclaration(
                      jedan
                       ConstTypeNumber(
                        1
                       ) [ConstTypeNumber]
                     ) [ConstDeclaration]
                   ) [ConstDeclListSignle]
                 ) [ConstDecl]
               ) [DeclarationConstant]
             ) [DeclarationList]
             DeclarationConstant(
               ConstDecl(
                 Type(
                  int
                 ) [Type]
                 ConstDeclListSignle(
                   ConstDeclaration(
                    pet
                     ConstTypeNumber(
                      5
                     ) [ConstTypeNumber]
                   ) [ConstDeclaration]
                 ) [ConstDeclListSignle]
               ) [ConstDecl]
             ) [DeclarationConstant]
           ) [DeclarationList]
           DeclarationVariable(
             VarDecl(
               Type(
                int
               ) [Type]
               VarDeclListSingle(
                 VariableArray(
                  niz
                 ) [VariableArray]
               ) [VarDeclListSingle]
             ) [VarDecl]
           ) [DeclarationVariable]
         ) [DeclarationList]
         DeclarationVariable(
           VarDecl(
             Type(
              char
             ) [Type]
             VarDeclListSingle(
               VariableArray(
                nizch
               ) [VariableArray]
             ) [VarDeclListSingle]
           ) [VarDecl]
         ) [DeclarationVariable]
       ) [DeclarationList]
       DeclarationVariable(
         VarDecl(
           Type(
            int
           ) [Type]
           VarDeclListSingle(
             VariableIdent(
              a
             ) [VariableIdent]
           ) [VarDeclListSingle]
         ) [VarDecl]
       ) [DeclarationVariable]
     ) [DeclarationList]
     DeclarationVariable(
       VarDecl(
         Type(
          set
         ) [Type]
         VarDeclListMultiple(
           VarDeclListMultiple(
             VarDeclListSingle(
               VariableIdent(
                s1
               ) [VariableIdent]
             ) [VarDeclListSingle]
             VariableIdent(
              s2
             ) [VariableIdent]
           ) [VarDeclListMultiple]
           VariableIdent(
            s3
           ) [VariableIdent]
         ) [VarDeclListMultiple]
       ) [VarDecl]
     ) [DeclarationVariable]
   ) [DeclarationList]
   MethodDeclarationListMultiple(
     NoMethodDeclList(
     ) [NoMethodDeclList]
     MethodDeclaration(
       MethVoid(
       ) [MethVoid]
       MethodName(
        main
       ) [MethodName]
       NoFormPars(
       ) [NoFormPars]
       VarDeclarationArray(
         VarDeclarationArray(
           NoVarDeclarationArray(
           ) [NoVarDeclarationArray]
           VarDecl(
             Type(
              int
             ) [Type]
             VarDeclListSingle(
               VariableIdent(
                bodovi
               ) [VariableIdent]
             ) [VarDeclListSingle]
           ) [VarDecl]
         ) [VarDeclarationArray]
         VarDecl(
           Type(
            int
           ) [Type]
           VarDeclListSingle(
             VariableIdent(
              temp
             ) [VariableIdent]
           ) [VarDeclListSingle]
         ) [VarDecl]
       ) [VarDeclarationArray]
       StatementListMultiple(
         StatementListMultiple(
           StatementListMultiple(
             StatementListMultiple(
               StatementListMultiple(
                 StatementListMultiple(
                   StatementListMultiple(
                     StatementListMultiple(
                       StatementListMultiple(
                         StatementListMultiple(
                           NoStatementList(
                           ) [NoStatementList]
                           StatementDesignator(
                             DesignatorEqualExpr(
                               DesignatorIdent(
                                niz
                               ) [DesignatorIdent]
                               ExprPositive(
                                 SignleTerm(
                                   FactorNewExprArray(
                                     Type(
                                      int
                                     ) [Type]
                                     ExprPositive(
                                       SignleTerm(
                                         FactorConst(
                                           ConstTypeNumber(
                                            3
                                           ) [ConstTypeNumber]
                                         ) [FactorConst]
                                       ) [SignleTerm]
                                     ) [ExprPositive]
                                   ) [FactorNewExprArray]
                                 ) [SignleTerm]
                               ) [ExprPositive]
                             ) [DesignatorEqualExpr]
                           ) [StatementDesignator]
                         ) [StatementListMultiple]
                         StatementDesignator(
                           DesignatorEqualExpr(
                             DesignatorIdentExpr(
                               DesignatorArrayName(
                                niz
                               ) [DesignatorArrayName]
                               ExprPositive(
                                 SignleTerm(
                                   FactorConst(
                                     ConstTypeNumber(
                                      0
                                     ) [ConstTypeNumber]
                                   ) [FactorConst]
                                 ) [SignleTerm]
                               ) [ExprPositive]
                             ) [DesignatorIdentExpr]
                             ExprPositive(
                               SignleTerm(
                                 FactorConst(
                                   ConstTypeNumber(
                                    1
                                   ) [ConstTypeNumber]
                                 ) [FactorConst]
                               ) [SignleTerm]
                             ) [ExprPositive]
                           ) [DesignatorEqualExpr]
                         ) [StatementDesignator]
                       ) [StatementListMultiple]
                       StatementDesignator(
                         DesignatorEqualExpr(
                           DesignatorIdentExpr(
                             DesignatorArrayName(
                              niz
                             ) [DesignatorArrayName]
                             ExprPositive(
                               SignleTerm(
                                 FactorConst(
                                   ConstTypeNumber(
                                    1
                                   ) [ConstTypeNumber]
                                 ) [FactorConst]
                               ) [SignleTerm]
                             ) [ExprPositive]
                           ) [DesignatorIdentExpr]
                           ExprPositive(
                             SignleTerm(
                               FactorConst(
                                 ConstTypeNumber(
                                  2
                                 ) [ConstTypeNumber]
                               ) [FactorConst]
                             ) [SignleTerm]
                           ) [ExprPositive]
                         ) [DesignatorEqualExpr]
                       ) [StatementDesignator]
                     ) [StatementListMultiple]
                     StatementDesignator(
                       DesignatorEqualExpr(
                         DesignatorIdentExpr(
                           DesignatorArrayName(
                            niz
                           ) [DesignatorArrayName]
                           ExprPositive(
                             SignleTerm(
                               FactorConst(
                                 ConstTypeNumber(
                                  2
                                 ) [ConstTypeNumber]
                               ) [FactorConst]
                             ) [SignleTerm]
                           ) [ExprPositive]
                         ) [DesignatorIdentExpr]
                         ExprPositive(
                           SignleTerm(
                             FactorConst(
                               ConstTypeNumber(
                                3
                               ) [ConstTypeNumber]
                             ) [FactorConst]
                           ) [SignleTerm]
                         ) [ExprPositive]
                       ) [DesignatorEqualExpr]
                     ) [StatementDesignator]
                   ) [StatementListMultiple]
                   StatementDesignator(
                     DesignatorEqualExpr(
                       DesignatorIdent(
                        s1
                       ) [DesignatorIdent]
                       ExprPositive(
                         SignleTerm(
                           FactorNewExprArray(
                             Type(
                              set
                             ) [Type]
                             ExprPositive(
                               SignleTerm(
                                 FactorConst(
                                   ConstTypeNumber(
                                    5
                                   ) [ConstTypeNumber]
                                 ) [FactorConst]
                               ) [SignleTerm]
                             ) [ExprPositive]
                           ) [FactorNewExprArray]
                         ) [SignleTerm]
                       ) [ExprPositive]
                     ) [DesignatorEqualExpr]
                   ) [StatementDesignator]
                 ) [StatementListMultiple]
                 StatementDesignator(
                   DesignatorActPars(
                     DesignatorIdent(
                      add
                     ) [DesignatorIdent]
                     MultipleActPars(
                       SingleActPar(
                         ExprPositive(
                           SignleTerm(
                             FactorDesignator(
                               DesignatorIdent(
                                s1
                               ) [DesignatorIdent]
                             ) [FactorDesignator]
                           ) [SignleTerm]
                         ) [ExprPositive]
                       ) [SingleActPar]
                       ExprPositive(
                         SignleTerm(
                           FactorConst(
                             ConstTypeNumber(
                              1
                             ) [ConstTypeNumber]
                           ) [FactorConst]
                         ) [SignleTerm]
                       ) [ExprPositive]
                     ) [MultipleActPars]
                   ) [DesignatorActPars]
                 ) [StatementDesignator]
               ) [StatementListMultiple]
               StatementDesignator(
                 DesignatorActPars(
                   DesignatorIdent(
                    add
                   ) [DesignatorIdent]
                   MultipleActPars(
                     SingleActPar(
                       ExprPositive(
                         SignleTerm(
                           FactorDesignator(
                             DesignatorIdent(
                              s1
                             ) [DesignatorIdent]
                           ) [FactorDesignator]
                         ) [SignleTerm]
                       ) [ExprPositive]
                     ) [SingleActPar]
                     ExprPositive(
                       SignleTerm(
                         FactorConst(
                           ConstTypeNumber(
                            1
                           ) [ConstTypeNumber]
                         ) [FactorConst]
                       ) [SignleTerm]
                     ) [ExprPositive]
                   ) [MultipleActPars]
                 ) [DesignatorActPars]
               ) [StatementDesignator]
             ) [StatementListMultiple]
             StatementDesignator(
               DesignatorActPars(
                 DesignatorIdent(
                  add
                 ) [DesignatorIdent]
                 MultipleActPars(
                   SingleActPar(
                     ExprPositive(
                       SignleTerm(
                         FactorDesignator(
                           DesignatorIdent(
                            s1
                           ) [DesignatorIdent]
                         ) [FactorDesignator]
                       ) [SignleTerm]
                     ) [ExprPositive]
                   ) [SingleActPar]
                   ExprPositive(
                     SignleTerm(
                       FactorConst(
                         ConstTypeNumber(
                          2
                         ) [ConstTypeNumber]
                       ) [FactorConst]
                     ) [SignleTerm]
                   ) [ExprPositive]
                 ) [MultipleActPars]
               ) [DesignatorActPars]
             ) [StatementDesignator]
           ) [StatementListMultiple]
           StatementPrint(
             ExprPositive(
               SignleTerm(
                 FactorDesignator(
                   DesignatorIdent(
                    s1
                   ) [DesignatorIdent]
                 ) [FactorDesignator]
               ) [SignleTerm]
             ) [ExprPositive]
           ) [StatementPrint]
         ) [StatementListMultiple]
         StatementPrint(
           ExprPositive(
             SignleTerm(
               FactorDesignator(
                 DesignatorIdent(
                  eol
                 ) [DesignatorIdent]
               ) [FactorDesignator]
             ) [SignleTerm]
           ) [ExprPositive]
         ) [StatementPrint]
       ) [StatementListMultiple]
     ) [MethodDeclaration]
   ) [MethodDeclarationListMultiple]
 ) [Program]
INFO  20:43:09,909 - ==========================================================================================
INFO  20:43:09,909 - Checking program semantics
INFO  20:43:09,909 - ==========================================================================================
INFO  20:43:09,915 - ==========================================================================================
INFO  20:43:09,915 - Semantic check passed
INFO  20:43:09,915 - ==========================================================================================
INFO  20:43:09,917 - Parsiranje uspesno zavrseno!
