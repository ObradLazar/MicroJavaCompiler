package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, VOID, PRINT, READ, NEW, CONST, RETURN;
terminal SEMI, COMMA, UNION;
terminal EQUAL, DOUBLEPLUS, DOUBLEMINUS, MINUS, PLUS, MOD, DIV, MUL;
terminal LBRACE, RBRACE, LBRACKET, RBRACKET, LPAREN, RPAREN;

terminal Integer CONSTNUMBER;
terminal Boolean CONSTBOOLEAN;
terminal Character CONSTCHAR;
terminal String IDENT;

nonterminal Program Program;
nonterminal ProgramName ProgramName;
nonterminal DeclList DeclList;
nonterminal Declaration Declaration;
nonterminal MethodDeclList MethodDeclList;
nonterminal ConstDecl ConstDecl;
nonterminal ConstDeclList ConstDeclList;
nonterminal ConstDeclaration ConstDeclaration;
nonterminal ConstType ConstType;
nonterminal VarDecl VarDecl;
nonterminal VarDeclList VarDeclList;
nonterminal Variable Variable;
nonterminal VarDeclArray VarDeclArray;
nonterminal MethodSignature MethodSignature;
nonterminal MethodDecl MethodDecl;
nonterminal FormParsList FormParsList;
nonterminal FormPars FormPars;
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal Designator Designator;
nonterminal Type Type;
nonterminal Expr Expr;
nonterminal AddopTermList AddopTermList;
nonterminal Term Term;
nonterminal ActPars ActPars;
nonterminal Factor Factor;
nonterminal Setop Setop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;

Program ::= (Program) PROG ProgramName:P1 DeclList:D2 LBRACE MethodDeclList:M3 RBRACE {: RESULT=new Program(P1, D2, M3); RESULT.setLine(P1left); :};

ProgramName ::= (ProgramName) IDENT:name {: RESULT=new ProgramName(name); RESULT.setLine(nameleft); :};

DeclList ::= (DeclarationList) DeclList:D1 Declaration:D2 {: RESULT=new DeclarationList(D1, D2); RESULT.setLine(D1left); :}
            |
            (NoDeclarationList) {: RESULT=new NoDeclarationList(); :} /* epsilon */
            ;

Declaration ::=(DeclarationConstant) ConstDecl:C1 {: RESULT=new DeclarationConstant(C1); RESULT.setLine(C1left); :}
            |
            (DeclarationVariable) VarDecl:V1 {: RESULT=new DeclarationVariable(V1); RESULT.setLine(V1left); :}
            ;

MethodDeclList ::= (MethodDeclarationListMultiple) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarationListMultiple(M1, M2); RESULT.setLine(M1left); :}
                |
                (NoMethodDeclList) {: RESULT=new NoMethodDeclList(); :} /* epsilon */
                ;

ConstDecl ::= (ConstDecl) CONST Type:T1 ConstDeclList:C2 SEMI {: RESULT=new ConstDecl(T1, C2); RESULT.setLine(T1left); :};

ConstDeclList ::=(ConstDeclListMultiple) ConstDeclaration:C1 COMMA ConstDeclList:C2 {: RESULT=new ConstDeclListMultiple(C1, C2); RESULT.setLine(C1left); :}
                |
                (ConstDeclListSignle) ConstDeclaration:C1 {: RESULT=new ConstDeclListSignle(C1); RESULT.setLine(C1left); :}
                ;

ConstDeclaration ::= (ConstDeclaration) IDENT:name EQUAL ConstType:C1 {: RESULT=new ConstDeclaration(name, C1); RESULT.setLine(nameleft); :};

VarDecl ::=(VarDecl) Type:T1 VarDeclList:V2 SEMI {: RESULT=new VarDecl(T1, V2); RESULT.setLine(T1left); :};

VarDeclList ::= (VarDeclListMultiple) VarDeclList:V1 COMMA Variable:V2 {: RESULT=new VarDeclListMultiple(V1, V2); RESULT.setLine(V1left); :}
            |
            (VarDeclListSignle) Variable:V1 {: RESULT=new VarDeclListSignle(V1); RESULT.setLine(V1left); :}
            ;

Variable ::= (VariableIdent) IDENT:varName {: RESULT=new VariableIdent(varName); RESULT.setLine(varNameleft); :}
            |
            (VariableArray) IDENT:varName LBRACKET RBRACKET {: RESULT=new VariableArray(varName); RESULT.setLine(varNameleft); :}
            ;

MethodSignature ::=(MethodSignatureType) Type:T1 IDENT:methodName LPAREN FormParsList:F2 RPAREN {: RESULT=new MethodSignatureType(T1, methodName, F2); RESULT.setLine(T1left); :}
                |
                (MethodSignatureVoid) VOID IDENT:methodName LPAREN FormParsList:F1 RPAREN {: RESULT=new MethodSignatureVoid(methodName, F1); RESULT.setLine(methodNameleft); :}
                |
                (MethodSignatureVoidNoPars) VOID IDENT:methodName LPAREN RPAREN {: RESULT=new MethodSignatureVoidNoPars(methodName); RESULT.setLine(methodNameleft); :}
				|
				(MethodSignatureTypeNoPars) Type:T1 IDENT:methodName LPAREN  RPAREN {: RESULT=new MethodSignatureTypeNoPars(T1, methodName); RESULT.setLine(T1left); :}
                ;

MethodDecl ::=(MethodDeclaration) MethodSignature:M1 VarDeclArray:V2 LBRACE StatementList:S3 RBRACE {: RESULT=new MethodDeclaration(M1, V2, S3); RESULT.setLine(M1left); :};

VarDeclArray ::=(VarDeclarationArray) VarDeclArray:V1 VarDecl:V2 {: RESULT=new VarDeclarationArray(V1, V2); RESULT.setLine(V1left); :}
                |
                (NoVarDeclarationArray) {: RESULT=new NoVarDeclarationArray(); :}/* epsilon */
                ;

ConstType ::= (ConstTypeNumber) CONSTNUMBER:numberConst {: RESULT=new ConstTypeNumber(numberConst); RESULT.setLine(numberConstleft); :}
            |
            (ConstTypeBoolean) CONSTBOOLEAN:booleanConst {: RESULT=new ConstTypeBoolean(booleanConst); RESULT.setLine(booleanConstleft); :}
            |
            (ConstTypeCharacter) CONSTCHAR:charConst {: RESULT=new ConstTypeCharacter(charConst); RESULT.setLine(charConstleft); :}
            ;

FormParsList ::=(FormParsListMultiple) FormParsList:F1 COMMA FormPars:F2 {: RESULT=new FormParsListMultiple(F1, F2); RESULT.setLine(F1left); :}
                |
                (FormParsListSignle) FormPars:F1 {: RESULT=new FormParsListSignle(F1); RESULT.setLine(F1left); :}
                ;

FormPars ::=(FormPar) Type:T1 IDENT:parName {: RESULT=new FormPar(T1, parName); RESULT.setLine(T1left); :}
            |
            (FormParArray) Type:T1 IDENT:parName LBRACKET RBRACKET {: RESULT=new FormParArray(T1, parName); RESULT.setLine(T1left); :}
            ;

StatementList ::=(StatementListMultiple) StatementList:S1 Statement:S2 {: RESULT=new StatementListMultiple(S1, S2); RESULT.setLine(S1left); :}
                |
                (NoStatementList) {: RESULT=new NoStatementList(); :} /* epsilon */
                ;

Statement ::= (StatementDesignator) DesignatorStatement:D1 SEMI {: RESULT=new StatementDesignator(D1); RESULT.setLine(D1left); :}
			|
			(StatementRead) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new StatementRead(D1); RESULT.setLine(D1left); :}
			|
			(StatementPrint) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new StatementPrint(E1); RESULT.setLine(E1left); :}
			|
			(StatementPrintMultiple) PRINT LPAREN Expr:E1 COMMA CONSTNUMBER:C2 RPAREN SEMI {: RESULT=new StatementPrintMultiple(E1, C2); RESULT.setLine(E1left); :}
			|
			(StatementReturnEmpty) RETURN SEMI {: RESULT=new StatementReturnEmpty(); :}
			|
			(StatementReturnSomething) RETURN Expr:E1 SEMI {: RESULT=new StatementReturnSomething(E1); RESULT.setLine(E1left); :}
			;

DesignatorStatement ::=(DesignatorEqualExpr) Designator:D1 EQUAL Expr:E2 {: RESULT=new DesignatorEqualExpr(D1, E2); RESULT.setLine(D1left); :}
					|
					(DesignatorUnion) Designator:D1 EQUAL Designator:D2 Setop:S3 Designator:D4 {: RESULT=new DesignatorUnion(D1, D2, S3, D4); RESULT.setLine(D1left); :}
					|
					(DesignatorIncrement) Designator:D1 DOUBLEPLUS {: RESULT=new DesignatorIncrement(D1); RESULT.setLine(D1left); :}
					|
					(DesignatorDecrement) Designator:D1 DOUBLEMINUS {: RESULT=new DesignatorDecrement(D1); RESULT.setLine(D1left); :}
					|
					(DesignatorActPars) Designator:D1 LPAREN ActPars:A2 RPAREN {: RESULT=new DesignatorActPars(D1, A2); RESULT.setLine(D1left); :}
					|
					(DesignatorNoActPars) Designator:D1 LPAREN RPAREN {: RESULT=new DesignatorNoActPars(D1); RESULT.setLine(D1left); :}
					;

Designator ::= (DesignatorIdent) IDENT:designatorName {: RESULT=new DesignatorIdent(designatorName); RESULT.setLine(designatorNameleft); :}
			|
			(DesignatorIdentExpr) IDENT:designatorName LBRACKET Expr:E1 RBRACKET {: RESULT=new DesignatorIdentExpr(designatorName, E1); RESULT.setLine(designatorNameleft); :}
			;

Expr ::=(PositiveExpr) Term:T1 AddopTermList:A2 {: RESULT=new PositiveExpr(T1, A2); RESULT.setLine(T1left); :}
		|
		(NegativeExpr) MINUS Term:T1 AddopTermList:A2 {: RESULT=new NegativeExpr(T1, A2); RESULT.setLine(T1left); :}
		;
	
AddopTermList ::=(MultipleTermAddopList) AddopTermList:A1 Addop:A2 Term:T3 {: RESULT=new MultipleTermAddopList(A1, A2, T3); RESULT.setLine(A1left); :}
				|
				(NoTermAddopList) {: RESULT=new NoTermAddopList(); :} /* epsilon */
				;
	
Setop ::= (Union) UNION {: RESULT=new Union(); :};

Addop ::=(Plus) PLUS {: RESULT=new Plus(); :}
		|
		(Minus) MINUS {: RESULT=new Minus(); :}
		;

Mulop ::=(Mul) MUL {: RESULT=new Mul(); :}
		|
		(Div) DIV {: RESULT=new Div(); :}
		|
		(Mod) MOD {: RESULT=new Mod(); :}
		;

Term ::=(MultipleTerm) Term:T1 Mulop:M2 Factor:F3 {: RESULT=new MultipleTerm(T1, M2, F3); RESULT.setLine(T1left); :}
		|
		(SignleTerm) Factor:F1 {: RESULT=new SignleTerm(F1); RESULT.setLine(F1left); :};

ActPars ::= (MultipleActPars) ActPars:A1 COMMA Expr:E2 {: RESULT=new MultipleActPars(A1, E2); RESULT.setLine(A1left); :}
			|
			(SingleActPar) Expr:E1 {: RESULT=new SingleActPar(E1); RESULT.setLine(E1left); :}
			;

Factor ::=(FactorConst) ConstType:C1 {: RESULT=new FactorConst(C1); RESULT.setLine(C1left); :}
		|
		(FactorNewExprArray) NEW Type:T1 LBRACKET Expr:E2 RBRACKET {: RESULT=new FactorNewExprArray(T1, E2); RESULT.setLine(T1left); :}
		|
		(FactorExpr) LPAREN Expr:E1 RPAREN {: RESULT=new FactorExpr(E1); RESULT.setLine(E1left); :}
		|
		(FactorDesignator) Designator:D1 {: RESULT=new FactorDesignator(D1); RESULT.setLine(D1left); :}
		|
		(FactorDesignatorCallFunc) Designator:D1 LPAREN ActPars:A2 RPAREN {: RESULT=new FactorDesignatorCallFunc(D1, A2); RESULT.setLine(D1left); :}
		|
		(FactorDesignatorCallFuncNoPars) Designator:D1 LPAREN RPAREN {: RESULT=new FactorDesignatorCallFuncNoPars(D1); RESULT.setLine(D1left); :}
		;

Type ::= (TypeName) IDENT:typeName {: RESULT=new TypeName(typeName); RESULT.setLine(typeNameleft); :};


















