package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, VOID, PRINT, READ, NEW, CONST, RETURN;
terminal SEMI, COMMA, UNION;
terminal EQUAL, DOUBLEPLUS, DOUBLEMINUS, MINUS, PLUS, MOD, DIV, MUL;
terminal LBRACE, RBRACE, LBRACKET, RBRACKET, LPAREN, RPAREN;

terminal Integer CONSTNUMBER;
terminal Boolean CONSTBOOLEAN;
terminal Character CONSTCHAR;
terminal String IDENT;

nonterminal Program, ProgramName;
nonterminal DeclList, Declaration, MethodDeclList;
nonterminal ConstDecl, ConstDeclList, ConstDeclaration, ConstType;
nonterminal VarDecl, VarDeclList, Variable, VarDeclArray;
nonterminal MethodSignature, MethodDecl;
nonterminal FormParsList, FormPars;
nonterminal StatementList, Statement;
nonterminal DesignatorStatement, Designator;
nonterminal Type, Expr, AddopTermList, Term, ActPars, Factor;
nonterminal Setop, Addop, Mulop;

Program ::= (Program) PROG ProgramName DeclList LBRACE MethodDeclList RBRACE;

ProgramName ::= (ProgramName) IDENT:name;

DeclList ::= (DeclarationList) DeclList Declaration
            |
            (NoDeclarationList) /* epsilon */
            ;

Declaration ::=(DeclarationConstant) ConstDecl
            |
            (DeclarationVariable) VarDecl
            ;

MethodDeclList ::= (MethodDeclarationListMultiple) MethodDeclList MethodDecl
                |
                (NoMethodDeclList) /* epsilon */
                ;

ConstDecl ::= (ConstDecl) CONST Type ConstDeclList SEMI;

ConstDeclList ::=(ConstDeclListMultiple) ConstDeclaration COMMA ConstDeclList
                |
                (ConstDeclListSignle) ConstDeclaration
                ;

ConstDeclaration ::= (ConstDeclaration) IDENT:name EQUAL ConstType;

VarDecl ::=(VarDecl) Type VarDeclList SEMI;

VarDeclList ::= (VarDeclListMultiple) VarDeclList COMMA Variable
            |
            (VarDeclListSignle) Variable
            ;

Variable ::= (VariableIdent) IDENT:varName
            |
            (VariableArray) IDENT:varName LBRACKET RBRACKET
            ;

MethodSignature ::=(MethodSignatureType) Type IDENT:methodName LPAREN FormParsList RPAREN
                |
                (MethodSignatureVoid) VOID IDENT:methodName LPAREN FormParsList RPAREN
                |
                (MethodSignatureVoidNoPars) VOID IDENT:methodName LPAREN RPAREN
				|
				(MethodSignatureTypeNoPars) Type IDENT:methodName LPAREN  RPAREN
                ;

MethodDecl ::=(MethodDeclaration) MethodSignature VarDeclArray LBRACE StatementList RBRACE;

VarDeclArray ::=(VarDeclarationArray) VarDeclArray VarDecl
                |
                (NoVarDeclarationArray)/* epsilon */
                ;

ConstType ::= (ConstTypeNumber) CONSTNUMBER:numberConst
            |
            (ConstTypeBoolean) CONSTBOOLEAN:booleanConst
            |
            (ConstTypeCharacter) CONSTCHAR:charConst
            ;

FormParsList ::=(FormParsListMultiple) FormParsList COMMA FormPars
                |
                (FormParsListSignle) FormPars
                ;

FormPars ::=(FormPar) Type IDENT:parName
            |
            (FormParArray) Type IDENT:parName LBRACKET RBRACKET
            ;

StatementList ::=(StatementListMultiple) StatementList Statement
                |
                (NoStatementList) /* epsilon */
                ;

Statement ::= (StatementDesignator) DesignatorStatement SEMI
			|
			(StatementRead) READ LPAREN Designator RPAREN SEMI
			|
			(StatementPrint) PRINT LPAREN Expr RPAREN SEMI
			|
			(StatementPrintMultiple) PRINT LPAREN Expr COMMA CONSTNUMBER RPAREN SEMI
			|
			(StatementReturnEmpty) RETURN SEMI
			|
			(StatementReturnSomething) RETURN Expr SEMI
			;

DesignatorStatement ::=(DesignatorEqualExpr) Designator EQUAL Expr
					|
					(DesignatorUnion) Designator EQUAL Designator Setop Designator
					|
					(DesignatorIncrement) Designator DOUBLEPLUS
					|
					(DesignatorDecrement) Designator DOUBLEMINUS
					|
					(DesignatorActPars) Designator LPAREN ActPars RPAREN
					|
					(DesignatorNoActPars) Designator LPAREN RPAREN
					;

Designator ::= (DesignatorIdent) IDENT:designatorName
			|
			(DesignatorIdentExpr) IDENT:designatorName LBRACKET Expr RBRACKET
			;

Expr ::=(PositiveExpr) Term AddopTermList
		|
		(NegativeExpr) MINUS Term AddopTermList
		;
	
AddopTermList ::=(MultipleTermAddopList) AddopTermList Addop Term
				|
				(NoTermAddopList) /* epsilon */
				;
	
Setop ::= (Union) UNION;

Addop ::=(Plus) PLUS
		|
		(Minus) MINUS
		;

Mulop ::=(Mul) MUL
		|
		(Div) DIV
		|
		(Mod) MOD
		;

Term ::=(MultipleTerm) Term Mulop Factor
		|
		(SignleTerm) Factor;

ActPars ::= (MultipleActPars) ActPars COMMA Expr
			|
			(SingleActPar) Expr
			;

Factor ::=(FactorConst) ConstType
		|
		(FactorNewExprArray) NEW Type LBRACKET Expr RBRACKET
		|
		(FactorExpr) LPAREN Expr RPAREN
		|
		(FactorDesignator) Designator
		|
		(FactorDesignatorCallFunc) Designator LPAREN ActPars RPAREN
		|
		(FactorDesignatorCallFuncNoPars) Designator LPAREN RPAREN
		;

Type ::= (TypeName) IDENT:typeName;


















